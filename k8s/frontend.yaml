apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      initContainers:
        # Wait for backend to be ready
        - name: wait-for-backend
          image: busybox:1.35
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for backend to be ready..."
              until nc -z backend-external 8000; do
                echo "Backend is not ready yet. Waiting 5 seconds..."
                sleep 5
              done
              echo "Backend is ready!"
              
              # Also check if the backend health endpoint is responsive
              echo "Checking backend health endpoint..."
              until wget -q --spider http://backend-external:8000/api/health 2>/dev/null; do
                echo "Backend health endpoint is not ready yet. Waiting 3 seconds..."
                sleep 3
              done
              echo "Backend health endpoint is ready!"
      containers:
        - name: frontend
          image: frontend:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: nginx.conf
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector:
    app: frontend
  ports:
    - port: 3000
      targetPort: 80
  type: NodePort
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: default
  labels:
    app: frontend
    type: nginx-config
data:
  nginx.conf: |
    server {
        listen 80;
        server_name localhost;

        root /usr/share/nginx/html;
        index index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Handle static assets (JS, CSS, images, etc.) - serve them directly or return 404
        location ~* \.(js|mjs|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Access-Control-Allow-Origin "*";
            try_files $uri =404;
            
            # Ensure correct MIME types
            location ~* \.js$ {
                add_header Content-Type "application/javascript";
            }
            location ~* \.mjs$ {
                add_header Content-Type "application/javascript";
            }
            location ~* \.css$ {
                add_header Content-Type "text/css";
            }
        }

        # Handle API requests - proxy to backend
        location /api/ {
            proxy_pass http://backend-external:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
        }

        # Handle Vite dev assets (for development) - return 404 instead of index.html
        location /src/ {
            return 404;
        }

        # Handle all other requests - SPA fallback to index.html
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Error pages
        error_page 404 /index.html;
    }
